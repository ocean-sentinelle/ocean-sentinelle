# === Script PowerShell : Inspection compl√®te de l‚Äôarborescence (Corrig√©) ===

# D√©finit le chemin de base comme √©tant le r√©pertoire courant.
$basePath = Get-Location

Write-Output "üìÅ Inspection de la structure du dossier : $($basePath.Path)"
Write-Output "============================================================="
Write-Output ""

# --- Affichage de la structure des dossiers ---
Write-Output "üìÇ Liste des dossiers"
Write-Output "-------------------------------------------------------------"
# R√©cup√®re tous les dossiers de mani√®re r√©cursive et affiche leur chemin complet.
Get-ChildItem -Path $basePath -Recurse -Directory | ForEach-Object {
    Write-Output $_.FullName
}

Write-Output ""
Write-Output "üìÑ D√©tail des fichiers"
Write-Output "-------------------------------------------------------------"

# --- Collecte et affichage des d√©tails des fichiers ---

# On stocke tous les objets 'fichier' dans un tableau avant de les afficher.
# C'est plus efficace que d'appeler Format-Table pour chaque fichier.
$fileDetails = Get-ChildItem -Path $basePath -Recurse -File | ForEach-Object {
    # Calcule le chemin relatif pour un affichage plus propre.
    $relativePath = $_.FullName.Replace($basePath.Path, ".")

    # Cr√©e un objet personnalis√© pour chaque fichier.
    # Les cl√©s contenant des caract√®res sp√©ciaux ou des espaces doivent √™tre entre guillemets.
    [PSCustomObject]@{
        'Fichier'      = $relativePath
        'Extension'    = $_.Extension
        'Taille (Ko)'  = [math]::Round($_.Length / 1KB, 2)
        'Modifi√© le'   = $_.LastWriteTime
    }
}

# Affiche le tableau complet une fois que toutes les donn√©es ont √©t√© collect√©es.
# -AutoSize ajuste la largeur des colonnes pour une meilleure lisibilit√©.
if ($fileDetails) {
    $fileDetails | Format-Table -AutoSize
} else {
    Write-Output "Aucun fichier trouv√© dans le r√©pertoire."
}
